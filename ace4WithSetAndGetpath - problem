#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAXBUFFSIZE 513
#define PROMPT "(☭ ͜ʖ ☭)>"
#define NUMBEROFTOKENS 50
#define SIZEOFTOKENS 50
#define DELIMITERS " \t|><&;\n\377"

/*
*    Structure used for passing tokens
*/

char *getenv(const char *name); //searches for variable name and returns pointer 
int chdir(const char* path); //changes the current directory to the one passed
char *getcwd(char *buf, size_t size); //returns cur directory pathname and stores in buf, buf big enough to hold it. Size is length of buf  
int setenv(const char *name, const char *value, int overwrite);
void checkdirectory(char *buf, size_t sizechar); //checks the current directory 
void getpath();
void setpath();
char cwd[256];


typedef struct{
    int tokenNumber;
    char tokens[NUMBEROFTOKENS][SIZEOFTOKENS];
    char command[MAXBUFFSIZE];
}TokenList;

void loop();
void display_prompt();
void get_input(char input[MAXBUFFSIZE]);
int execute(char input[MAXBUFFSIZE]);
void tokenize(TokenList* Tokens);

int main()
{



checkdirectory(cwd, sizeof(cwd));
//
  
//get the home directory
    char* home;
    home = getenv("HOME"); //gets path of home
    //for testing
    if (home == NULL)
    	printf("path null");
    else printf("Home %s \n", home);

checkdirectory(cwd, sizeof(cwd));
//

//Set current working directory to user home 
    int i = chdir(home);
    if (i == 0)
	printf("changed directory to home \n");
    else printf("error cannot change directory\n");

checkdirectory(cwd, sizeof(cwd));
    /*SETUP*/


    /*Display prompt, Read, Parse, Repeat*/
    loop();

    /*CLEANING*/

    return 0;
}

/*
*    Reads commands from the user and executes them if they are valid
*/
void loop(){
    int status;

    do{
        char input[MAXBUFFSIZE] = {};
        display_prompt();
        get_input(input);
        status = execute(input);
    }while(status);
}


/*
*    Prints the prompt on the screen
*/
void display_prompt(){
    printf(PROMPT);
}

/*
*    Reads user input from the keyboard
*    Return Value: List of tokens and the number of tokens
*/
void get_input(char input[MAXBUFFSIZE]){

    char c;
    int index = 0;

    do{
        c = getchar();
        input[index] = c;
        index++;
    }while(index<MAXBUFFSIZE && !(c==EOF && index==1) && c!='\n');

    if(c==EOF && index==1){
        input[0] = 'e';
        input[1] = 'x';
        input[2] = 'i';
        input[3] = 't';
    }

}

/*
*    Tokenizes the input command and executes commands based on the tokens
*    Parameter: Structure containing an integer representing the number of Tokens and an array of Tokens
*    Return Value: - 0 = the shell is still running
*                  - 1 = exit the shelll
*/
int execute(char input[MAXBUFFSIZE]){

    TokenList Tokens = {0};
    strcpy(Tokens.command,input);       //Saves the input in the command in case a functions needs the full command line from the user. Also useful for error checking 

    tokenize(&Tokens);          //Breaks the command into tokens 

    if(Tokens.tokenNumber==0)    //If no comments then just return 1
        return 1;


    //Uncomment this for testing (Prints the number of tokens and then each token on a separate line)
/*
    printf("%d\n",Tokens.tokenNumber);
    for(int i=0;i<Tokens.tokenNumber;i++)
        printf("'%s'\n",Tokens.tokens[i]);
*/

    if(strcmp(Tokens.tokens[0],"exit")==0)     //The user entered an exit command, return 0 to terminate the shell loop
        return 0;

///////problem here. setpath and getpath only work if they are first. right now setpath first so it works///
if(strcmp(Tokens.tokens[0],"setpath")==0)

	setpath(Tokens.tokens[1]);

        return 1;


if(strcmp(Tokens.tokens[0],"getpath")==0 && Tokens.tokenNumber == 1)
	getpath();
        return 1;


    printf("Command not found \n");
    return 1;
}

void tokenize(TokenList* Tokens){

char* pointer;

pointer = strtok (Tokens->command,DELIMITERS);
    while (pointer != NULL){
        strcpy(Tokens->tokens[Tokens->tokenNumber],pointer);
        Tokens->tokenNumber++;
        pointer = strtok (NULL, DELIMITERS);
    }
}


//keep original path
void getpath(){
char* path;
path = getenv("PATH");

if (path == NULL)
	printf("path null \n");
else printf("found path %s \n", path);
//need to save path
}

void setpath(char* path){

printf("in setpathhhhh \n");
setenv("PATH", path, 1);
printf("found path and set path as %s \n",  getenv("PATH"));
//can test with /usr/bin:/bin:/usr/sbin:/usr/local/bin:/opt/X11/bin
}


// checks current directory 
void checkdirectory(char *buf, size_t size){

if (getcwd(cwd, sizeof(cwd)) == NULL)
	perror("error");
else
	printf("current directory %s \n", cwd);


}
